<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- Copyright 1998 - 2011 Double Precision, Inc.  See COPYING for -->
<!-- distribution information. -->
<refentry>
  <info><author><firstname>Sam</firstname><surname>Varshavchik</surname><contrib>Author</contrib></author><productname>Courier Mail Server</productname></info>

  <refmeta>
    <refentrytitle>maildropfilter</refentrytitle>
    <manvolnum>7</manvolnum>
    <refmiscinfo>Double Precision, Inc.</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>maildropfilter</refname>
    <refpurpose>maildrop's filtering language</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <informalexample>
      <simpara>
<filename moreinfo="none">@withetcdir@/maildroprc</filename>,
<filename moreinfo="none">$HOME/.mailfilter</filename>,
<filename moreinfo="none">$HOME/.mailfilters/*</filename>, and friends...
</simpara>
    </informalexample>
  </refsynopsisdiv>

  <refsect1>
    <title>DESCRIPTION</title>

    <para>
This manual page describes the language used by <command moreinfo="none">maildrop</command>
to filter E-mail messages.
The mail filtering instructions are read from a file.

The language is loosely structured, it is based on pattern
matching. The language has a distinct lexical and syntactical structure,
very similar to Perl's, but it is important to note that it is not Perl,
and is very different from Perl, in certain cases.</para>

    <para>
If the filtering instructions do not exist,
<command moreinfo="none">maildrop</command> delivers the
message to the default mailbox without doing any additional processing,
making it indistinguishable from the usual mail delivery agent.</para>

    <para>
It is important to note that <command moreinfo="none">maildrop</command> reads and parses the
<systemitem class="resource" moreinfo="none">filter file</systemitem> before doing anything. If there are any errors
<command moreinfo="none">maildrop</command> prints an error message, and terminates with the exit code
set to <errorcode moreinfo="none">EX_TEMPFAIL</errorcode>. A compliant mail transport agent
should
re-queue the message for a later delivery attempt. Hopefully, most simple
syntax errors will not cause mail to be bounced back if the error is caught
and fixed quickly.</para>

    <refsect2>
      <title>Environment</title>
      <para>
<anchor id="environment"/>

<command moreinfo="none">maildrop</command> uses variables to access and manipulate messages.
Variables
are arbitrary text accessed by referring to the name of the variable, such as
<varname>HOME</varname>, or <varname>DEFAULT</varname>.
Text is placed into a variable by
using an assignment statement, such as:
</para>
      <blockquote>
	<informalexample>
	  <programlisting format="linespecific">
FILE="IN.junk"
</programlisting>
	</informalexample>
      </blockquote>

      <para>
This statement puts the text "IN.junk" (without the quotes) into a variable
whose name is <varname>FILE</varname>.
Later, the contents of a variable are accessed by using
the $ symbol and the name for the variable. For example:</para>

<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
to $FILE
</programlisting>
	  </informalexample>
	</blockquote>

      <para>
This will deliver the current message to the mailbox file (or a maildir
directory) named "IN.junk".</para>

      <para>
<command moreinfo="none">maildrop</command> initially creates variables from the environment
variables
of the operating system, UNLESS <command moreinfo="none">maildrop</command> runs in delivery mode.
Each
operating system environment variable becomes a <command moreinfo="none">maildrop</command>
variable.
When running in delivery mode, <command moreinfo="none">maildrop</command> does not import the
environment for security reasons,
except for the environment variables that define the process locale
(<varname>LANG</varname>,
<varname>LANGUAGE</varname>, and
<varname>LC_<replaceable>*</replaceable></varname>), which are still imported.
      </para>
      <para>
In all cases <command moreinfo="none">maildrop</command> resets the
following variables to their default values: <varname>HOME</varname>,
<varname>DEFAULT</varname>, <varname>SHELL</varname>,
<varname>PATH</varname>, <varname>LOCKEXT</varname>,
<varname>LOCKREFRESH</varname>, <varname>LOCKSLEEP</varname>,
<varname>LOCKTIMEOUT</varname>, <varname>MAILDIRQUOTA</varname>,
<varname>SENDMAIL</varname> and <varname>LOGNAME</varname>.</para>

      <para>
There's one exception to this rule which applies to the version of
<command moreinfo="none">maildrop</command> that comes with the
<ulink url="http://www.courier-mta.org/"><application moreinfo="none">Courier</application> mail server</ulink>.  The following
does not apply to the standalone version of <command moreinfo="none">maildrop</command>:
when running in
delivery mode, if the <option>-d</option> flag was not used, or if it specifies
the same userid as the one that's running <command moreinfo="none">maildrop</command>:
the following
variables are automatically imported from the environment: <varname>HOME</varname>, <varname>SHELL</varname>,
<varname>LOGNAME</varname> and <varname>MAILDIRQUOTA</varname>.
These environment variables are
initialized by the <application moreinfo="none">Courier</application>
mail server prior to running <command moreinfo="none">maildrop</command>.
Additionally, the
initial value for the <varname>DEFAULT</varname> maildrop variable is imported from
the <varname>MAILDROPDEFAULT</varname> environment variable. This is because
the <application moreinfo="none">Courier</application> mail server overloads the
DEFAULT environment variable to store the defaulted
portion of the local mailbox address. See the <ulink url="dot-courier.html"><citerefentry><refentrytitle>dot-courier</refentrytitle><manvolnum>5</manvolnum></citerefentry></ulink> man page in the
<application moreinfo="none">Courier</application> mail server
distribution. You can get the <application moreinfo="none">Courier</application>
mail server's <varname>DEFAULT</varname> value by
using the
<command moreinfo="none">import</command> command.
Note, however, that this will clobber the old
contents of <varname>DEFAULT</varname>, which is probably not what you want.
The right way to do this would be something like this:</para>

      <blockquote>
	<informalexample>
	  <programlisting format="linespecific">
SAVEDEFAULT=$DEFAULT
import DEFAULT
LOCALDEFAULT=$DEFAULT
DEFAULT=$SAVEDEFAULT
</programlisting>
	</informalexample>
      </blockquote>

      <para>All internal variables are exported back as environment variables when
<command moreinfo="none">maildrop</command> runs an external command. Changes to internal variables, made
by the <systemitem class="resource" moreinfo="none">filter file</systemitem>, are reflected in the exported environment.</para>
    </refsect2>

    <refsect2>
      <title>Lexical structure</title>

      <para>
Most whitespace is generally ignored. The <token>#</token>
character introduces a comment
running to the end of the line, which is also ignored. Unlike other mail
filters, <command moreinfo="none">maildrop</command> parses the
<systemitem class="resource" moreinfo="none">filter file</systemitem> before taking any action
with the message.
If there are syntax errors in the file, <command moreinfo="none">maildrop</command> displays
an error message, and returns <errorcode moreinfo="none">EX_TEMPFAIL</errorcode>. That should
cause the
mail message to remain in the queue, and, hopefully allow the problem to be
corrected, without bouncing any mail.</para>

      <note>
	<para>
In <command moreinfo="none">maildrop</command>, the end of line is a lexical token. In order to
continue a long statement on the next line, terminate the line with a
backslash character.</para></note>
    </refsect2>

    <refsect2>
      <title>Literal text</title>
      <para>
Literal text in the <command moreinfo="none">maildrop</command> filtering language is
surrounded by
either single or double quotes. In order to enter a single quote into a text
literal surrounded by single quotes, or a double quote into a literal
surrounded by double quotes, prefix it with a backslash character. Use two
backslash characters characters to enter one backslash character in the text
literal.</para>

      <note>
	<para>A backslash followed by either a backslash, or a matching quote, is
the only situation where the backslash character is actually removed, leaving
only the following character in the actual text literal. If a backslash
character is followed by any other character, the backslash is NOT
removed.</para>
      </note>

      <para>Multiple text literals in a row are automatically concatenated, even if
they use different quotes. For example:</para>

      <blockquote>
	<informalexample>
	  <programlisting format="linespecific">
FOOBAR="Foo"'bar'
SAVEDEFAULT=$DEFAULT
import DEFAULT
LOCALDEFAULT=$DEFAULT
DEFAULT=$SAVEDEFAULT
</programlisting>
	</informalexample>
      </blockquote>
      <para>
This sets the variable <varname>FOOBAR</varname> to the text "Foobar".
</para>

    </refsect2>

    <refsect2>

      <title>Variable substitution</title>

      <para>
<anchor id="varsubst"/>

Variable substitution is performed on text literals that's surrounded by
double quotation marks. The "<token>$</token>" character, followed by a variable name,
is replaced by that variable's contents.
</para>

      <blockquote>
	<informalexample>
	  <programlisting format="linespecific">
MAILBOX="$HOME/Mailbox"
</programlisting>
	</informalexample>
      </blockquote>


      <para>
This sets the variable <varname>MAILBOX</varname> to the contents of the
variable
<varname>HOME</varname> followed by <literal moreinfo="none">"/Mailbox"</literal>.
Variable names must begin with an
uppercase letter, a lowercase letter, or an underscore.
Following that, all
letters, digits, and underscores are taken as a variable name, and its
contents replace the <token>$</token> sign, and the variable name. It is possible to access
variables whose name includes other characters, by using braces as
follows:</para>

      <blockquote>
	<informalexample>
	  <programlisting format="linespecific">
MAILBOX="${HOME-WORD}/Mailbox"
</programlisting>
	</informalexample>
      </blockquote>

      <para>
Inserts the contents of the <varname>HOME-WORD</varname> variable. If the
variable
does not exist, the empty text literal is used to replace the variable name.
It is not possible to access variables whose names include the <token>}</token>
character.</para>

      <para>If the <token>$</token> character is not followed by a left brace, letter, or an
underscore, the <token>$</token> character remains unmolested in the text literal. A
backslash followed by the <token>$</token> character results in a <token>$</token> character in the text
literal, without doing any variable substitution.</para>

      <para>
Variable substitution is not done in text literals which are surrounded by
single quotes (apostrophes).</para>
    </refsect2>


    <refsect2>
      <title>Command line arguments</title>

      <para>
<command moreinfo="none">maildrop</command> initializes special variables:
<varname>$1</varname>, <varname>$2</varname>, and so on, with
additional parameters specified on the <command moreinfo="none">maildrop</command>
command line. A <systemitem class="resource" moreinfo="none">filter file</systemitem>
may use those variables just like any other variables.</para>
    </refsect2>

    <refsect2>
      <title>Predefined variables</title>
      <anchor id="predefined"/>
      <para>
The following variables are automatically defined by
<command moreinfo="none">maildrop</command>. The
default values for the following variables may be changed by the system
administrator. For security reasons, the values of the following variables
are always reset to their default values, and are never imported from the
environment:</para>

      <variablelist>

	<varlistentry><term><varname>DEFAULT</varname></term><listitem><para>The default mailbox to deliver the message to.
    If the <systemitem class="resource" moreinfo="none">filter file</systemitem> does not indicate a mailbox to deliver this message
    to, the message is delivered to this mailbox. The default mailbox is
    defined by the system administrator.
    
  </para></listitem></varlistentry>
	<varlistentry><term><varname>FROM</varname></term><listitem><para>Message envelope sender. This is usually the same
    address as what appears in the <literal moreinfo="none">From:</literal> header, but may
not be.
    This information may or may not be available to <command moreinfo="none">maildrop</command> on your
    system. The message envelope sender is usually specified with the <option>-f</option>
    option to <command moreinfo="none">maildrop</command>. If the <option>-f</option> option is not given, <command moreinfo="none">maildrop</command>
    looks for the <literal moreinfo="none">From_</literal> line in the message. As the last resort,
    <literal moreinfo="none">FROM</literal> defaults to the userid which invoked <command moreinfo="none">maildrop</command>.
    Note that <varname>FROM</varname> may be empty - the message envelope sender is
    empty for bounce messages.
  </para></listitem></varlistentry>
	<varlistentry><term><varname>HOME</varname></term><listitem><para>Home directory of the user running
    <command moreinfo="none">maildrop</command>.
    
  </para></listitem></varlistentry>
	<varlistentry><term><varname>HOSTNAME</varname></term><listitem><para>Network name of the machine running maildrop.
    Obtained from <citerefentry><refentrytitle>gethostname</refentrytitle><manvolnum>3</manvolnum></citerefentry>.

  </para></listitem></varlistentry>
	<varlistentry><term><varname>LOCKEXT</varname></term><listitem><para>Extension for dot-lock files (default: <literal moreinfo="none">.lock</literal>).
    
  </para></listitem></varlistentry>
	<varlistentry><term><varname>LOCKREFRESH</varname></term><listitem><para>Refresh interval, in seconds, for dot-locks
    (default: <literal moreinfo="none">15</literal>). When <command moreinfo="none">maildrop</command> dot-locks a mailbox, <command moreinfo="none">maildrop</command>
    tries to refresh the lock periodically in order to keep other programs
    from removing a stale dot-lock. This is only required if a dot-lock
    exists for a prolonged period of time, which should be discouraged
    anyway.
    
  </para></listitem></varlistentry>
	<varlistentry><term><varname>LOCKSLEEP</varname></term><listitem><para>Number of seconds to wait to try again to
    create a dot-lock file, if one already exists (default: 5).
    
  </para></listitem></varlistentry>
	<varlistentry><term><varname>LOCKTIMEOUT</varname></term><listitem><para>Number of seconds to wait before removing a
    stale dot-lock file (default: <literal moreinfo="none">60</literal>). If a dot-lock file still exists after
    <varname>LOCKTIMEOUT</varname> seconds, <command moreinfo="none">maildrop</command> assumes that the
    process holding the lock no longer exists, and the dot-lock file can be
    safely removed. After removing the dot-lock file, <command moreinfo="none">maildrop</command> waits
    <varname>LOCKSLEEP</varname> seconds before trying to create its own dot-lock
    file, in order to avoid a race condition with another process which is
    also trying to remove the same stale dot-lock, at the same time.
    
  </para></listitem></varlistentry>
	<varlistentry><term><varname>LOGNAME</varname></term><listitem><para>Name of the user to who the message is being
    delivered.
    
  </para></listitem></varlistentry>
	<varlistentry>
	  <term><varname>MAILDROP_OLD_REGEXP</varname></term>

	  <listitem>
	    <para>
Revert to using the old legacy pattern matching engine.
Versions of <command moreinfo="none">maildrop</command> prior to version 2.0
(included in the <application moreinfo="none">Courier</application> mail server 0.51,
and earlier), used a built-in pattern matching engine, instead of using the
<acronym>PCRE</acronym>
library (see the
<quote><link linkend="patterns">Patterns</link></quote>
section).
<command moreinfo="none">maildrop</command> 1.x used a different syntax for patterns, which
is no longer described in this manual page.
The old pattern matching engine is still available, by
setting <varname>MAILDROP_OLD_REGEXP</varname> to <quote>1</quote>.
Setting this variable will use the legacy pattern matching engine for the
rest of the <command moreinfo="none">maildrop</command> recipe file.</para>

	    <para>
The pattern matching engine will be removed completely in a future version
of maildrop.
This setting provides for a transitional period of converting old recipes.
<varname>MAILDROP_OLD_REGEXP</varname> can be set to <quote>1</quote> in
the global <filename moreinfo="none">maildroprc</filename> file, then reset to <quote>0</quote>
in each individual <command moreinfo="none">maildrop</command> recipe file, after it gets
converted to the new syntax.</para>
	  </listitem>
	</varlistentry>
	<varlistentry><term><varname>MAILFILTER</varname></term><listitem><para>This is the name of the original <systemitem class="resource" moreinfo="none">filter file</systemitem>
    that was given to <command moreinfo="none">maildrop</command> on the command line. This is mostly
    usefull to <literal moreinfo="none">-default</literal> <systemitem class="resource" moreinfo="none">filter file</systemitem>s, it allows them to
    obtain the <ulink url="maildrop.html#moption">value of the -M option</ulink>
    specified on the command line.
  </para></listitem></varlistentry>
	<varlistentry><term><varname>PATH</varname></term><listitem><para>Command execution path. <command moreinfo="none">maildrop</command> resets PATH
    to the system default (usually
    <literal moreinfo="none">/bin:/usr/bin:/usr/local/bin</literal>).
    
  </para></listitem></varlistentry>
	<varlistentry><term><varname>SENDMAIL</varname></term><listitem><para>The mail delivery agent.
When <command moreinfo="none">maildrop</command> is
    instructed to deliver the message to a mailbox whose name begins with the
    ! character, this is interpreted as a request to forward the message. The
    <varname>SENDMAIL</varname> command is executed to forward the message.
    
  </para></listitem></varlistentry>
	<varlistentry><term><varname>SHELL</varname></term><listitem><para>The login shell. The shell is used to execute all
    commands invoked by <command moreinfo="none">maildrop</command>.
    
  </para></listitem></varlistentry>
	<varlistentry><term><varname>VERBOSE</varname></term><listitem><para>Current Debug level (default: <literal moreinfo="none">0</literal>). Setting <varname>VERBOSE</varname> to
    progressive higher values, between 1 and 9, produces debugging output on
    standard error. <command moreinfo="none">maildrop</command> ignores
the <varname>VERBOSE</varname> variable in delivery
    mode (in order not to confuse the mail transport agent).
    
  </para></listitem></varlistentry>
	<varlistentry><term><varname>UMASK</varname></term><listitem><para>The file creation mode mask, in octal.  The
    default setting of <literal moreinfo="none">077</literal> creates mailboxes that are readable and writable
    by the owner only.  Use <literal moreinfo="none">007</literal> to create mailboxes that are
    readable/writable by both owner and the group.  Use <literal moreinfo="none">037</literal>
    to create
    mailboxes that are readable by both owner and group, but writable by
    owner only.  Permissions on existing mailboxes are not changed, this
    setting affects only new mailboxes.  When delivering to maildirs this
    setting sets the permissions on new messages only.  Access permissions on
    messages in maildirs are also affected by the permissions on the maildir
    directories.
</para></listitem></varlistentry>
      </variablelist>
    </refsect2>

    <refsect2>

      <title>Other special variables</title>
      <para>
The following variables are automatically used by <command moreinfo="none">maildrop</command> when the
<systemitem class="resource" moreinfo="none">filter file</systemitem> is being processed:
</para>

      <variablelist>
	<varlistentry><term><varname>EXITCODE</varname></term>
	  <listitem><para>Return code for <command moreinfo="none">maildrop</command>. When
<command moreinfo="none">maildrop</command> successfully delivers a message, it terminates with this
exit code, which defaults to 0. When the <command moreinfo="none">to</command> or the
    <command moreinfo="none">cc</command> command is used to deliver the message to an external
    process, via a pipe, <command moreinfo="none">maildrop</command> will set this variable to the exit
    code of the external process. Since <command moreinfo="none">maildrop</command> immediately
    terminates after completing the <command moreinfo="none">to</command> command this means that
    <command moreinfo="none">maildrop</command>'s exit code will be the exit code of the external
    process. If the <command moreinfo="none">to</command> command does not deliver the message to a
    process you must set <varname>EXITCODE</varname> before the <command moreinfo="none">to</command>
    command, since <command moreinfo="none">maildrop</command> terminates immediately after finishing the
    delivery.
    
  </para></listitem></varlistentry>
	<varlistentry><term><varname>KEYWORDS</varname></term>
	  <listitem>
	    <para>
The <varname>KEYWORDS</varname> variable is used only when delivering a
message to a maildir, and implements the optional IMAP keyword extension
as implemented in the
<ulink url="http://www.courier-mta.org/"><application moreinfo="none">Courier</application> IMAP server</ulink>.
It may be optionally initialized to contain a comma-separate list of keywords.
The <link linkend="to"><command moreinfo="none">to</command></link>, or the
<link linkend="cc"><command moreinfo="none">cc</command></link> command, delivers the message
to the maildir normally, but also associated the list of keywords in
<varname>KEYWORDS</varname> with the newly delivered message.</para>

	    <para>
<varname>KEYWORDS</varname> must be set before the message is delivered to
a maildir.
The contents of <varname>KEYWORDS</varname> are ignored, when delivering on
an mbox folder.
  </para></listitem></varlistentry>

	<varlistentry><term><varname>LINES</varname></term><listitem><para>Number of lines in the current message. Note that
    this may be an approximation. It may or may not take into account the -A
    option, or any mbox "From_" lines. Use this as criteria for filtering,
    nothing more.
    
  </para></listitem></varlistentry>
	<varlistentry><term><varname>MAILDIRQUOTA</varname></term><listitem><para>Set this variable in order to manually
    enforce a maximum size on ANY maildir where the message is delivered.
    This is an optional feature that must be enabled by the system
    administrator, see <ulink url="maildirquota.html"><citerefentry><refentrytitle>maildirquota</refentrytitle><manvolnum>8</manvolnum></citerefentry></ulink> for
    more information.
    
  </para></listitem></varlistentry>
	<varlistentry><term><varname>RETURNCODE</varname></term><listitem><para>This variable is set when <command moreinfo="none">maildrop</command>
    runs the <ulink url="#xfilter">xfilter</ulink> command, or a command that's
    specified within a pair of backtick characters ( command substitution ).
    The <varname>RETURNCODE</varname> variable will be set to the exit code of the
    command, after it completes.
    
  </para></listitem></varlistentry>
	<varlistentry><term><varname>SIZE</varname></term><listitem><para>Number of bytes in the message. This may or may not
    include the -A option, and the mbox From_ line. Use this as a criteria
    for filtering, nothing more.</para></listitem></varlistentry>
      </variablelist>
    </refsect2>

    <refsect2>

      <title>Unquoted text</title>

      <para>
All text strings in <systemitem class="resource" moreinfo="none">filter file</systemitem>s should be in single, or double quotes.
However, for convenience sake, quotes can be omitted under certain
circumstances.</para>

      <para>
Text that includes ONLY letters, digits, and the following characters:
<literal moreinfo="none">_-.:/${}@</literal> may appear without quotes. Note that this does not
allow spaces, or backslashes to be entered, however the text is still
variable-substituted, and the substituted text may contain other
characters.</para>

      <para>
Also, note that patterns (see below) begin with the slash character.
Normally, anything that begins with the slash is interpreted as a pattern.
However, text immediately after <quote>VARIABLE=</quote> is interpreted as a
string even if it begins with a slash. This is why something like:</para>

<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
MAILDIR=/var/mail
</programlisting>
	  </informalexample>
	</blockquote>
<para>
works as expected. Using quotes, though, is highly recommended. You must use
quotes to set a variable to a lone slash, because an unquoted slash is
interpreted as a division sign.</para>

      <para>
Long double or singly-quoted text can be broken across multiple lines by
ending the line with a lone backslash character, like this:</para>

<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
TEXT="This is a long \
 text string"
</programlisting>
	  </informalexample>
	</blockquote>
<para>
The backslash, the newline, and all leading whitespace on the next line is
removed, resulting in "This is a long text string".</para>

    </refsect2>
    <refsect2>

      <title>Command substitution</title>

      <para>
Text enclosed in back-tick characters is interpreted as a shell command. The
shell command is executed as a child process by <command moreinfo="none">maildrop</command>.
Its output is used in place of the command. For example:</para>

<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
DIR=`ls`
</programlisting>
	  </informalexample>
	</blockquote>
<para>
places the names of the files in the current directory into the DIR
variable.</para>

      <para>
The output of the command will have all newline characters replaced by
spaces, and leading and trailing spaces will be stripped (multiple spaces are
not removed, though). Also, the contents of the message being delivered is
made available to the command on standard input.</para>
    </refsect2>

    <refsect2>
      <title>Patterns</title>

      <anchor id="patterns"/>

      <para>
The pattern syntax in <command moreinfo="none">maildrop</command> is similar to the
<command moreinfo="none">grep</command> command's syntax, with some minor differences.
A pattern takes the following
form in the <systemitem class="resource" moreinfo="none">filter file</systemitem>:</para>

<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
/<replaceable>pattern</replaceable>/:<replaceable>options</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>

      <para>
<replaceable>pattern</replaceable> specifies the text to look for in the
message.

<replaceable>pattern</replaceable> must not begin with a space,
otherwise the leading slash will then be
interpreted as a division sign. If you must search for text that starts
with a space, use something like <literal moreinfo="none">"/[ ] ... /"</literal>.</para>

      <para>
The general syntax of <command moreinfo="none">maildrop</command>'s patterns is described
in the <citerefentry>
	  <refentrytitle>pcrepattern</refentrytitle>
	  <manvolnum>3</manvolnum></citerefentry>
manual page, with certain exceptions
noted below.
<command moreinfo="none">maildrop</command> uses the
<ulink url="http://www.pcre.org">PCRE</ulink>
library to implement pattern matching.
Not all features in <acronym>PCRE</acronym> are available in
<command moreinfo="none">maildrop</command>, and
the <quote>options</quote> part, which follows the pattern specification,
changes the pattern matching further.
Consult the
<citerefentry>
	  <refentrytitle>pcrepattern</refentrytitle>
	  <manvolnum>3</manvolnum></citerefentry>
manual page for more information, but note the following exceptions:</para>

      <itemizedlist>
	<listitem>
	  <para>
<literal moreinfo="none">UTF-8</literal> string matching is not presently supported.</para>
	</listitem>
	<listitem>
	  <para>
Internal options settings are not supported (but see the <quote>D</quote>
maildrop option, below).
Do not include option settings in the <replaceable>pattern</replaceable>,
doing so will lead to undefined results.</para>
	</listitem>

	<listitem>
	  <para>
Named subpatterns are not implemented.
Numbered subpatterns are implemented, see
<quote><link linkend="patmatch">Pattern Match Results</link></quote>,
below.</para>
	</listitem>
      </itemizedlist>
    </refsect2>

    <refsect2>
      <title>Pattern options</title>

      <anchor id="options"/>

      <para>
Following <literal moreinfo="none">/<replaceable>pattern</replaceable>/,</literal>
there may be an optional colon, followed by one. or
more options. The following options may be specified in any order:</para>

      <variablelist>
	<varlistentry><term><literal moreinfo="none">h</literal></term>
	  <listitem>
	    <para>Match this pattern against the message header.</para>
	  </listitem></varlistentry>
	<varlistentry><term><literal moreinfo="none">b</literal></term>
	  <listitem>
	    <para>Match this pattern against the message body.</para>
	  </listitem></varlistentry>
	<varlistentry><term><literal moreinfo="none">D</literal></term>
	  <listitem>
	    <para>This is a case sensitive match. Normally the patterns match either
uppercase or lowercase text. <literal moreinfo="none">/john/</literal> will match "John",
"john", or "JOHN". Specify the D option for a case-sensitive search:
lowercase letters in the pattern must match lowercase letters in the
message; ditto for uppercase.</para>
	  </listitem></varlistentry>
      </variablelist>

      <para>
If neither 'h' or 'b' is specified, the pattern is matched against the
header only. Specifying the 'b' option causes the pattern to be matched
against the message body. Specifying both causes the pattern to be matched
against the entire message.</para>

      <para>
Normally, each line in the message gets matched against the pattern
individually. When applying patterns to a header, multi-line headers (headers
split on several lines by beginning each continuation line with whitespace)
are silently combined into a single line, before the pattern is applied.</para>
    </refsect2>

    <refsect2>
      <title>Weighted scoring</title>

      <para>
Patterns are evaluated by <command moreinfo="none">maildrop</command> as any other numerical
expression. If a pattern is found, <command moreinfo="none">maildrop</command>'s filter
interprets the
results of the pattern match as number 1, or true, for filtering purposes. If
a pattern is not found the results of the pattern search is zero. Once a
pattern is found, the search stops. Second, and subsequent occurrences of the
same pattern are NOT searched for.</para>

      <para>
<command moreinfo="none">maildrop</command> can also do weighted scoring. In weighted scoring,
multiple occurrences of the same pattern are used to calculate a numerical
score.</para>

      <para>
To use a weighted search, specify the pattern as follows:</para>

<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
/<replaceable>pattern</replaceable>/:<replaceable>options</replaceable>,<replaceable>xxx</replaceable>,<replaceable>yyy</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>
<para>
where <replaceable>xxx</replaceable> and <replaceable>yyy</replaceable> are
two numbers. <replaceable>yyy</replaceable> is optional -- it will
default to 1, if missing.</para>

      <para>The first occurrence of the pattern is evaluated as xxx. The second
occurrence of the pattern is evaluated as xxx*yyy, the third as xxx*yyy*yyy,
etc... All occurrences of the pattern are added up to calculate the final
score.</para>

      <note>
	<para>
<command moreinfo="none">maildrop</command> does not
recognize multiple occurrences of the same pattern in the same line.
Multiple occurences of the same pattern in one line count as one
occurence.</para>
      </note>
    </refsect2>

    <refsect2>

      <title>Pattern Match Results</title>

      <anchor id="patmatch"/>

      <para>
After a pattern is successfully matched, the actual text that is matched
is placed in the <varname>MATCH</varname> variable. For example:</para>

<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
/^From:.*/
</programlisting>
	  </informalexample>
	</blockquote>
<para>
matches a line of the form:</para>

<blockquote>
	  <informalexample>
From: postmaster@localhost
	  </informalexample>
	</blockquote>

      <para>
Here the variable <varname>MATCH</varname> will be set to "From:
postmaster@localhost", which can be used in subsequent statements.</para>

      <para>
If the pattern contains subpatterns, the portions of the text that match
the first subpattern is placed in the <varname>MATCH1</varname> variable.
The second subpattern, if any, is placed in <varname>MATCH2</varname>, and
so on:</para>

      <blockquote>
	<informalexample>
	  <programlisting format="linespecific">
/^From:\s+(.*)@(.*)/
</programlisting>
	</informalexample>
      </blockquote>
      <para>
matched against the same line will set <varname>MATCH</varname> to
<quote>From: postmaster@localhost</quote>,
<varname>MATCH1</varname> to <quote>postmaster</quote>, and
<varname>MATCH2</varname> to <quote>localhost</quote>.
Of course, in real world the <quote>From:</quote> header is usually much
more complicated, and can't be handled that easily.
This is just an illustrative example.</para>

      <note>
	<para>
Subpatterns are not processed in the <literal moreinfo="none">foreach</literal>
statement.</para>
</note>

    </refsect2>

    <refsect2 id="conversion">
      <title>Conversion of <command moreinfo="none">maildrop</command> 1.x patterns to 2.0</title>
      <para>
Although the new <acronym>PCRE</acronym>-based pattern matching code in
<command moreinfo="none">maildrop</command> is completely different from the built-in
pattern matching code in <command moreinfo="none">maildrop</command> 1.x, very few changes
will be required to convert recipes to the new syntax.
The only major differences are:</para>

      <itemizedlist>
	<listitem>
	  <para>
The subexpression format has changed.
Any pattern that uses subexpression needs to be converted.
Additionally, references to <varname>MATCH2</varname> must be replaced
with <varname>MATCH1</varname>, <varname>MATCH3</varname> to
<varname>MATCH2</varname>, and so on.
References to plain old <varname>MATCH</varname> will remain the
same.</para>
	</listitem>

	<listitem>
	  <para>
The <quote>w</quote> pattern option is no longer possible, with
<acronym>PCRE</acronym>.
The very few recipes that use this option, if any actually exist,
will have to be rewritten in some other fashion.</para>
	</listitem>
      </itemizedlist>
    </refsect2>

    <refsect2>

      <title>Expressions</title>

      <para>
Although <command moreinfo="none">maildrop</command> evaluates expressions numerically,
results of
expressions are stored as text literals. When necessary, text literals are
converted to numbers, then the results of a mathematical operation is
converted back into a text literal.</para>

      <refsect3>
	<title>Operators</title>

	<para>
The following operators carry their usual meaning, and are listed in order
from lowest precedence, to the highest:</para>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">

||
&amp;&amp;
&lt;  &lt;=  &gt;  &gt;=  ==  !=  lt  le  gt  ge  eq  ne
|
&amp;
+  -
*  /
=~ /<replaceable>pattern</replaceable>/
/<replaceable>pattern</replaceable>/  !  ~  <replaceable>function()</replaceable>

</programlisting>
	  </informalexample>
	</blockquote>
      </refsect3>

      <refsect3>
	<title>Variable assignment</title>

	<anchor id="assign"/>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
VARIABLE=<replaceable>expression</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
Assigns the result of the expression to <replaceable>VARIABLE</replaceable>
(note no leading $ in front of variable).
</para>

	<note>
	  <para>
If <replaceable>VARIABLE</replaceable> is NOT surrounded by quotes, then it
may contain only letters, numbers, underscores, dashes, and a selected few
other characters. In order to initialize a variable whose name contains
non-standard punctuation marks, surround the name of the variable with
quotes.</para>
	</note>

      </refsect3>

      <refsect3>
	<title>cc - deliver a copy of the message</title>

	<anchor id="cc"/>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
cc <replaceable>expression</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The <command moreinfo="none">cc</command> statement is very similar to the
<command moreinfo="none">to</command> statement, except
that after delivering the message <command moreinfo="none">maildrop</command> continues
to process the
<systemitem class="resource" moreinfo="none">filter file</systemitem>,
unlike the <command moreinfo="none">to</command> statement which immediately
terminates <command moreinfo="none">maildrop</command> after the delivery is complete.
Essentially, the
message is carbon copied to the given mailbox, and may be delivered again to
another mailbox by another <command moreinfo="none">cc</command> or
<command moreinfo="none">to</command> statement.</para>

	<para>
<ulink url="#to">See the <command moreinfo="none">to</command> statement</ulink> for more
details.
When
<command moreinfo="none">cc</command> is used to deliver a message to a process
<command moreinfo="none">maildrop</command>
will set the <varname>EXITCODE</varname> variable to the process's exit
code.</para>
      </refsect3>

      <refsect3>
	<title>dotlock - create a manual dot-lock</title>

	<anchor id="dotlock"/>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
dotlock <replaceable>expression</replaceable> {

      ...

}
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
<command moreinfo="none">maildrop</command> automatically creates a lock when a message is
delivered to a
mailbox. Depending upon your system configuration,
<command moreinfo="none">maildrop</command> will use
either dot-locks, or the flock() system call.</para>

	<para>The <command moreinfo="none">dotlock</command> statement creates an explicit dot-lock
file. Use the <ulink url="#flock"><command moreinfo="none">flock</command> statement</ulink> to create an
explicit flock()
lock.</para>

	<para>The <replaceable>expression</replaceable> is a filename that should be
used as a lock file.
<command moreinfo="none">maildrop</command> creates the indicated dot-lock, executes the
filtering
instructions contained within the { ... } block, and removes the lock. The
expression <emphasis>must</emphasis> be the name of the dot-lock file itself,
<emphasis>NOT</emphasis>
the name of the mailbox file you want to lock.</para>

	<note>
	  <para>
With manual locking, it is possible to deadlock multiple
<command moreinfo="none">maildrop</command> processes (or any other processes that try to
claim the same
locks).</para>

	  <para>No deadlock detection is possible with dot-locks, and since
<command moreinfo="none">maildrop</command> automatically refreshes all of its dot-locks
regularly, they
will never go stale. You'll have <command moreinfo="none">maildrop</command> processes
hanging in limbo,
until their watchdog timers go off, aborting the mail delivery.</para>
	</note>
      </refsect3>

      <refsect3>
	<title>echo - output diagnostic information</title>

	<anchor id="echo"/>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
echo <replaceable>expression</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
<command moreinfo="none">maildrop</command> will print the given text. This is usually used
when
<command moreinfo="none">maildrop</command> runs in embedded mode, but can be used for
debugging
purposes. Normally, a newline is printed after the text. If text is
terminated with a \c, no newline will be printed.</para>
      </refsect3>

      <refsect3>
	<title>exception - trap fatal errors</title>

	<anchor id="exception"/>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
exception {

   ...

}
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The <command moreinfo="none">exception</command> statement traps errors that would normally
cause
<command moreinfo="none">maildrop</command> to terminate. If a fatal error is encountered
anywhere within the
block of statements enclosed by the <command moreinfo="none">exception</command> clause,
execution will
resume immediately following the <command moreinfo="none">exception</command> clause.</para>
      </refsect3>

      <refsect3>

	<title>exit - terminate filtering unconditionally</title>

	<anchor id="exit"/>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
exit
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The <command moreinfo="none">exit</command> statement immediately terminates filtering.
<command moreinfo="none">maildrop</command>'s
return code is set to the value of the <varname>EXITCODE</varname> variable.
Normally, <command moreinfo="none">maildrop</command> terminates immediately after <ulink url="#to">successfully delivering the message</ulink> to a mailbox. The
<command moreinfo="none">exit</command> statement causes <command moreinfo="none">maildrop</command> to
terminate without delivering the message anywhere.</para>

	<para>The <command moreinfo="none">exit</command> statement is usually used when
<command moreinfo="none">maildrop</command> runs in <ulink url="maildrop.html#embedded">embedded mode</ulink>, when message
delivery instructions are not allowed.</para>
      </refsect3>

      <refsect3>
	<title>flock - create an manual flock() lock</title>

	<anchor id="flock"/>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
flock <replaceable>expression</replaceable> {

      ...

}
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
<command moreinfo="none">maildrop</command> automatically creates a lock when a message is delivered to a
mailbox. Depending upon your system configuration, <command moreinfo="none">maildrop</command> will use
either dot-locks, or the flock() system call.</para>

	<para>The <command moreinfo="none">flock</command> statement creates a manual flock() lock.
Use the <ulink url="#dotlock"><command moreinfo="none">dotlock</command> statement</ulink>
to create a manual dot-lock
file.</para>

	<para>The <replaceable>expression</replaceable> is the name of the
file that should be locked.
<command moreinfo="none">maildrop</command> creates the lock on the indicated file, executes
the
filtering instructions contained within the { ... } block, and removes the
lock.</para>

	<note>
	  <para>
With manual locking, it is possible to deadlock multiple
<command moreinfo="none">maildrop</command> processes (or any other
processes that try to claim the same
locks). The operating system will automatically break flock() deadlocks. When
that happens, one of the <command moreinfo="none">maildrop</command> processes will terminate
immediately. Use the <command moreinfo="none">exception</command> statement in order to trap
this
exception condition, and execute an alternative set of filtering
instructions.</para>
	</note>
      </refsect3>

      <refsect3>
	<title>foreach - iterate over text sections matched by a pattern</title>
	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
foreach /pattern/:options
{
    ...
}

foreach (expression) =~ /pattern/:options
{
    ...
}
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The <command moreinfo="none">foreach</command> statement executes a block of statements for
each
occurrence of the given pattern in the given message, or expression. On every
iteration <varname>MATCH</varname> variable will be set to the matched string.
All the usual options may be applied to the pattern match,
EXCEPT the following:
<variablelist>
	    <varlistentry>
	      <term>,xxx,yyy</term>
	      <listitem>
		<para>
Weighted scoring is meaningless, in this context.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>( ... )</term>
	      <listitem>
		<para>
Subpatterns are not processed.
Only the <varname>MATCH</varname> variable will be set for each found
pattern.</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
</para>
      </refsect3>

      <refsect3>
	<title>if - conditional execution</title>
	<anchor id="if"/>
	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
if (<replaceable>expression</replaceable>)
{
    ...
}
else
{
    ...
}
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
Conditional execution. If <replaceable>expression</replaceable>
evaluates to a logical true (note -
parenthesis are required) then the first set of statements is executed.
The <command moreinfo="none">else</command> keyword, and the subsequent statements, are
optional. If present,
and the expression evaluates to a logical false, the
<command moreinfo="none">else</command> part is executed.</para>

	<para>
<command moreinfo="none">maildrop</command> evaluates all expression as text strings.
In the context
of a logical expression, an empty string, or the number 0 constitutes a
logical false value, anything else is a logical true value.</para>

	<para>If the <command moreinfo="none">if</command> part, or the
<command moreinfo="none">else</command>
part consists of only one
statement, the braces may be omitted.</para>

	<note>
	  <para>
The grammar of this <command moreinfo="none">if</command> statement is stricter than
usual.
If
you get baffling syntax errors from <command moreinfo="none">maildrop</command>, make sure that the
braces, and the if statement, appear on separate lines. Specifically: the
closing parenthesis, the closing braces, and the else statement, must be at
the end of the line (comments are allowed), and there may not be any blank
lines in between (not even ones containing comments only).</para>
	</note>
	<para>
If the <command>else</command> part contains a single <command>if</command>,
and nothing else,
this may be combined into an <command>elsif</command>:
</para>
	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
if (<replaceable>expression</replaceable>)
{
    ...
}
elsif (<replaceable>expression</replaceable>)
{
    ...
}
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The above example is logically identical to:</para>
	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
if (<replaceable>expression</replaceable>)
{
    ...
}
else
{
    if (<replaceable>expression</replaceable>)
    {
        ...
    }
}
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
Consecutive <command>elsif</command> sequences are allowed:
</para>
	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
if (<replaceable>expression</replaceable>)
{
    ...
}
elsif (<replaceable>expression</replaceable>)
{
    ...
}
elsif (<replaceable>expression</replaceable>)
{
    ...
}
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
Consecutive occurences of <command>elsif</command> commands eliminate a
significant amount of indentation, and the resulting code is more readable.
</para>
      </refsect3>

      <refsect3>
	<title>import - access original environment variable</title>
	<anchor id="import"/>
	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
import <replaceable>variable</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>


	<para>When <command moreinfo="none">maildrop</command> starts,
it normally imports the contents of the
environment variables, and assigns them to internal <command moreinfo="none">maildrop</command>
variables. For example, if there was an environment variable
<varname>FOO</varname>, the internal <command moreinfo="none">maildrop</command> variable
<varname>FOO</varname> will
have the contents of the environment variable.
From then on, <varname>FOO</varname>
will be no different than any other variable,
and when <command moreinfo="none">maildrop</command> runs
an external command, the contents of <command moreinfo="none">maildrop</command>'s
variables will be
exported as the environment for the command.</para>

	<para>Certain variables, like <varname>HOME</varname> and
<varname>PATH</varname>, are always reset to fixed defaults,
for security reasons.
Also, in delivery and embedded modes, the environment is not imported at all
(with the exception of system locale environment variables),
and <command moreinfo="none">maildrop</command> starts with only the fixed default
variables.</para>

	<para>
The <command moreinfo="none">import</command> statement initializes the specified
variable with the contents of the original environment variable
when <command moreinfo="none">maildrop</command> started.  For example:</para>

<blockquote>
	    <informalexample>
	      <programlisting format="linespecific">
echo "PATH is $PATH"
PATH="/bin"
echo "PATH is $PATH"
import PATH
echo "PATH is $PATH"
exit
</programlisting>
	    </informalexample>
	  </blockquote>

	<para>This results in the following output:</para>

	<blockquote>
	    <informalexample>
	      <programlisting format="linespecific">
PATH is /bin:/usr/bin:/usr/local/bin
PATH is /bin
PATH is /home/root/bin:/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
</programlisting>
	    </informalexample>
	  </blockquote>

	<para>
This shows that when <command moreinfo="none">maildrop</command> starts
<varname>PATH</varname> is set to the fixed default of
<literal moreinfo="none">/bin:/usr/bin:/usr/local/bin</literal>.
However, the original contents of
the <varname>PATH</varname> environment variable we different, and the
<command moreinfo="none">import</command> statement shows what it was.</para>
      </refsect3>

      <refsect3>
	<title>include - execute filtering instructions from another file</title>

	<anchor id="include"/>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
include <replaceable>expression</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The include statement reads a file, and executes filtering instructions
contained in that file. Note that the include statement is processed when the
current <systemitem class="resource" moreinfo="none">filter file</systemitem> is being executed. When <command moreinfo="none">maildrop</command> reads the initial
<systemitem class="resource" moreinfo="none">filter file</systemitem>, any syntax errors in the filtering instructions are immediately
reported, and <command moreinfo="none">maildrop</command> will terminate with a return code of
<errorcode moreinfo="none">EX_TEMPFAIL</errorcode>. Any errors in files specified by
<command moreinfo="none">include</command>
statements are NOT reported, because those files will not be read until the
<command moreinfo="none">include</command> statement is itself executed.</para>

	<para>
If the specified file does not exist, or if there are any syntax errors in
the file, <command moreinfo="none">maildrop</command> reports the error, and terminates with
a return
code of <errorcode moreinfo="none">EX_TEMPFAIL</errorcode>.</para>
      </refsect3>

      <refsect3>
	<title>log, logfile - log message deliveries</title>
	<anchor id="log"/>
	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
logfile <replaceable>expression</replaceable>

log <replaceable>expression</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
Logging in <command moreinfo="none">maildrop</command> is normally turned off.
The <command moreinfo="none">logfile</command>
statement specifies the file where
<command moreinfo="none">maildrop</command> will log how the message has been
disposed of. The parameter is then name of the file. If the
file exists <command moreinfo="none">maildrop</command> appends to the file.</para>

	<para>
For each delivery (the <ulink url="#to"><command moreinfo="none">to</command></ulink>
and <ulink url="#cc"><command moreinfo="none">cc</command></ulink>
statements, and default deliveries)
<command moreinfo="none">maildrop</command> records the
<literal moreinfo="none">From:</literal> and the
<literal moreinfo="none">Subject:</literal> fields, together with
the current time, in the log file.</para>

	<para>
The <command moreinfo="none">log</command> statement adds additional logging text to the
log file. The <command moreinfo="none">log</command> statement works exactly like
the <command moreinfo="none">echo</command>
statement, except that the text is written to the logfile, instead of
standard output.</para>
      </refsect3>

      <refsect3>
	<title>to - deliver message to a mailbox</title>
	<anchor id="to"/>
	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
to <replaceable>expression</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The <command moreinfo="none">to</command> statement delivers the message to a mailbox.
<replaceable>expression</replaceable>
must evaluate to a valid mailbox. A valid mailbox is either a mailbox file, a
maildir, or an external program (which includes forwarding to another
address).</para>

	<para>
The <command moreinfo="none">to</command> statement is the final delivery statement.
<command moreinfo="none">maildrop</command>
delivers message, then immediately terminates,
with its return code set to
the <varname>EXITCODE</varname> variable.
If there was an error while
delivering the message, <command moreinfo="none">maildrop</command> terminates with the
<errorcode moreinfo="none">EX_TEMPFAIL</errorcode> exit code. A properly-written mail
transport agent
should re-queue the message, and re-attempt delivery at some later time.</para>

	<para>
An <replaceable>expression</replaceable> that begins with the
"<token>|</token>" character
specifies an external program to run to handle the actual
delivery. The <varname>SHELL</varname> variable specifies the shell to
execute the
given command. The message is provided to the command on standard input.
<command moreinfo="none">maildrop</command>'s exit code will be the process's exit
code.</para>

	<para>
An <replaceable>expression</replaceable> that begins
with an exclamation mark, "<token>!</token>"
specifies a whitespace-delimited
list of E-mail addresses to forward the message
to.
The program
specified by the <varname>SENDMAIL</varname> variable is run as an
external program, with the list of E-mail addresses provided as parameters to
the program.</para>

	<para>
Otherwise, <replaceable>expression</replaceable> names the mailbox
where <command moreinfo="none">maildrop</command> delivers the message.
If <replaceable>expression</replaceable> is a directory,
<command moreinfo="none">maildrop</command> assumes
that the directory is a maildir directory.
Otherwise, <command moreinfo="none">maildrop</command> will deliver
the message to a file, formatted in traditional mailbox format.
<command moreinfo="none">maildrop</command> will use either dot-locking, or flock()-locking
when
delivering the message to the file.</para>
      </refsect3>

      <refsect3>
	<title>while - repeatedly execute a block of statements</title>
	<anchor id="while"/>
	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
while (<replaceable>expression</replaceable>)
{
    ...
}
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The <replaceable>expression</replaceable> is repeatedly evaluated.
Each time it <ulink url="#if">evaluates to a logical true</ulink>,
the statements inside the braces
are executed.
When <replaceable>expression</replaceable> evaluates to a logical false,
the while loop is over. Take care to avoid infinite loops.</para>
      </refsect3>

      <refsect3>
	<title>xfilter - filter message through another program</title>
	<anchor id="xfilter"/>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
xfilter <replaceable>expression</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
<replaceable>expression</replaceable> specifies an external program that
<command moreinfo="none">maildrop</command> runs to filter the current message.
The current
message will be piped to the filter program as standard input. The output of
the filter program replaces the current message being delivered. The external
program must terminate with an exit code of 0. If the external program does
not terminate with an exit code of 0, or if it does not read the message from
the standard input, <command moreinfo="none">maildrop</command> terminates with an exit code of
<errorcode moreinfo="none">EX_TEMPFAIL</errorcode>.</para>
      </refsect3>

      <refsect3>
	<title>|| - logical or</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
<replaceable>expression1</replaceable> <token>||</token> <replaceable>expression2</replaceable>

</programlisting>
	  </informalexample>
	</blockquote>

	<para>
If <replaceable>expression1</replaceable> evaluates to a logical true,
the result of the <token>||</token> is
<replaceable>expression1</replaceable>, otherwise it's 
<replaceable>expression2</replaceable>, which is evaluated.</para>

	<para>
<command moreinfo="none">maildrop</command> uses the following concept of true/false:
an empty text
literal, or a text literal that consists of the single character "0" is a
logical false value. Anything else is a logical true value.</para>
      </refsect3>

      <refsect3>
	<title>&amp;&amp; - logical and</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
<replaceable>expression1</replaceable> <token>&amp;&amp;</token> <replaceable>expression2</replaceable>

</programlisting>
	  </informalexample>
	</blockquote>

	<para>
If <replaceable>expression1</replaceable> evaluates to a logical false,
the result of the <token>&amp;&amp;</token> is
<replaceable>expression1</replaceable>, otherwise it's 
<replaceable>expression2</replaceable>, which is evaluated.</para>

	<para>
<command moreinfo="none">maildrop</command> uses the following concept of true/false:
an empty text
literal, or a text literal that consists of the single character "0" is a
logical false value. Anything else is a logical true value.</para>

      </refsect3>

      <refsect3>
	<title>&lt;, &lt;=, &gt;, &gt;=, ==, !=   - numerical comparison</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
<replaceable>expression1</replaceable> <token>&lt;</token> <replaceable>expression2</replaceable>

<replaceable>expression1</replaceable> <token>&lt;=</token> <replaceable>expression2</replaceable>

<replaceable>expression1</replaceable> <token>&gt;</token> <replaceable>expression2</replaceable>

<replaceable>expression1</replaceable> <token>&gt;=</token> <replaceable>expression2</replaceable>

<replaceable>expression1</replaceable> <token>==</token> <replaceable>expression2</replaceable>

<replaceable>expression1</replaceable> <token>!=</token> <replaceable>expression2</replaceable>

</programlisting>
	  </informalexample>
	</blockquote>

	<para>
These operators compare their left hand side expression against their right
hand side. These operators compare the numerical values of each side, as
floating point numbers. If the numbers compare as indicated, the result of
the comparison is the text string "1", otherwise it is the text
string 0.</para>

	<note>
	  <para>Ccomparisons are not associative:
"<literal moreinfo="none">a &lt; b &lt; c</literal>" is an error.
If it is absolutely necessary, use
"<literal moreinfo="none">(a &lt; b) &lt; c</literal>".</para>
	</note>
      </refsect3>

      <refsect3>
	<title>lt, le, gt, ge, eq, ne - text comparison</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
<replaceable>expression1</replaceable> <token>lt</token> <replaceable>expression2</replaceable>

<replaceable>expression1</replaceable> <token>le</token> <replaceable>expression2</replaceable>

<replaceable>expression1</replaceable> <token>gt</token> <replaceable>expression2</replaceable>

<replaceable>expression1</replaceable> <token>ge</token> <replaceable>expression2</replaceable>

<replaceable>expression1</replaceable> <token>eq</token> <replaceable>expression2</replaceable>

<replaceable>expression1</replaceable> <token>ne</token> <replaceable>expression2</replaceable>

</programlisting>
	  </informalexample>
	</blockquote>

	<para>
These operators compare their left hand side expression against their right
hand side. These operators compare each side as text strings (alphabetically,
although the text may include anything). If the text strings compare as
indicated, the result of the comparison is the text string "1", otherwise it
is the text string 0.</para>

	<note>
	  <para>
Comparisons are not associative: "<literal moreinfo="none">a lt b lt c</literal>"
is an error. If it is
absolutely necessary, use "<literal moreinfo="none">(a lt b) lt c</literal>".
(But why would you?).</para>
	</note>
      </refsect3>

      <refsect3>
	<title>| - bitwise or</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
<replaceable>expression1</replaceable> <token>|</token> <replaceable>expression2</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
This is the bitwise or operator. Its result is a 32 bit
integer, which is a bitwise-or combination of the left hand side and the
right hand side.</para>
      </refsect3>

      <refsect3>
	<title>&amp; - bitwise and</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
<replaceable>expression1</replaceable> <token>&amp;</token> <replaceable>expression2</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
This is the bitwise and operator. Its result is a 32 bit
integer, which is a bitwise-and combination of the left hand side and the
right hand side.</para>
      </refsect3>

      <refsect3>
	<title>+, -, *, / - numerical operations</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
<replaceable>expression1</replaceable> <token>+</token> <replaceable>expression2</replaceable>

<replaceable>expression1</replaceable> <token>-</token> <replaceable>expression2</replaceable>

<replaceable>expression1</replaceable> <token>*</token> <replaceable>expression2</replaceable>

<replaceable>expression1</replaceable> <token>/</token> <replaceable>expression2</replaceable>

</programlisting>
	  </informalexample>
	</blockquote>

	<para>
These are numerical, floating point, operators.</para>

      </refsect3>

      <refsect3>

	<title>=~ /pattern/:options - pattern match against string</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
<replaceable>expression</replaceable> <token>=~</token> /<replaceable>pattern</replaceable>/:<replaceable>option</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The left hand side of the <token>=~</token> operator can be any expression.
The right hand
side is always a pattern specification. The result of the operator is the
weighted match of the pattern against
<replaceable>expression</replaceable> (if the options do not
specify weighted scoring, the result is simply 1 if the pattern was found,
0 if not).</para>

	<para>
See "<ulink url="#patterns">Patterns</ulink>" for more information.</para>
      </refsect3>
      <refsect3>
	<title>/pattern/:options - pattern match against message</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
/<replaceable>pattern</replaceable>/:<replaceable>option</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The result of this operator is the weighted match of the pattern against the
current message (if the options do not specify weighted scoring, the result
is simply 1 if the pattern was found, 0 if not).</para>

	<para>
See "<ulink url="#patterns">Patterns</ulink>" for more information.</para>
      </refsect3>

      <refsect3>
	<title>!, ~ - logical/bitwise not operator.</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
<token>!</token> <replaceable>expression</replaceable>

<token>~</token> <replaceable>expression</replaceable>
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The result of the <token>!</token>
operator is a logical opposite of its right hand side
expression. If the right hand side expression evaluated to a logical true,
the result is a logical false. If it evaluated to a logical false, the result
is a logical true.</para>

	<para>
<command moreinfo="none">maildrop</command> uses the following concept of true/false:
an empty text
literal, or a text literal that consists of the single character "0" is a
logical false value. Anything else is a logical true value.</para>

	<para>
The result of the <token>~</token>
operator is a bitwise complement of its right hand
side expression. The right hand side expression is evaluated as a 32 bit
integer, and the result of this operator is a bitwise complement of the
result.</para>
      </refsect3>

      <refsect3>
	<title>escape(string) - escape special characters in a string.</title>
	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
<function moreinfo="none">escape</function>(<replaceable>expression</replaceable>)
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The <function moreinfo="none">escape</function> function returns
its sole argument with every occurrence of a
special character prefixed by a backslash. A special character is any of the
following characters:</para>

	<blockquote>
	    <informalexample>
	      <programlisting format="linespecific">
|!$()[]\+*?.&amp;;`'-~&lt;&gt;^{}"
</programlisting>
	    </informalexample>
	  </blockquote>

	<para>
This can used when <ulink url="#patmatch">matching pattern sections</ulink>,
and then taking one section and matching it again. For example:</para>

	<blockquote>
	    <informalexample>
	      <programlisting format="linespecific">
if ( /^From:\s*(.*)/ )
{
     MATCH1=escape($MATCH1)
     if ( /^Subject:.*$MATCH1/ )
     {
        ...
     }
}
</programlisting>
	    </informalexample>
	  </blockquote>

	<para>
This example checks if the contents of the <literal moreinfo="none">From:</literal>
header can also be found in the <literal moreinfo="none">Subject:</literal> header.
If the <function moreinfo="none">escape</function> function were not used, then any
special characters in the <literal moreinfo="none">From:</literal> header that are also used
in regular
expressions, such as <token>*</token>
or <token>+</token>, would introduce unpredictable behavior, most
likely a syntax error.</para>

	<para>
The reason why this list of special characters also includes characters
not used in <command moreinfo="none">maildrop</command>'s regular expressions is to allow
<command moreinfo="none">maildrop</command>'s variables to be used on the command line of a
shell command
executed by the <command moreinfo="none">xfilter</command> command, backtick characters, or
<command moreinfo="none">to</command> or <command moreinfo="none">cc</command> commands.</para>

	<para>
Although using data from an external data source is dangerous, and it may
result in inadvertent exploits, using the escape function should hopefully
result in fewer surprises.</para>
      </refsect3>

      <refsect3>
	<title>gdbmopen, gdbmclose, gdbmfetch, gdbmstore - GDBM support in
<command moreinfo="none">maildrop</command></title>
	<para>
These functions provide support for GDBM database files. See <ulink url="maildropgdbm.html"><citerefentry><refentrytitle>maildropgdbm</refentrytitle><manvolnum>5</manvolnum></citerefentry></ulink>
for more information.</para>

	<note>
	  <para>
The system administrator can disable GDBM support in
<command moreinfo="none">maildrop</command>, so these commands may not be available to
you.</para>
	</note>
      </refsect3>

      <refsect3>
	<title>getaddr(string) - extract RFC 2822 addresses from a header.</title>

	<anchor id="getaddr"/>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
if ( /^From:\s*(.*)/ )
{
     ADDR=getaddr($MATCH1)
}
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
This function is usually applied to a header that contains
<ulink url="http://www.rfc-editor.org/rfc/rfc2822.txt">RFC 2822</ulink>
addresses. It extracts the actual addresses from the
header, without any comments or extraneous punctuation. Each address is
followed by a newline character. For example,
if <replaceable>string</replaceable> contains:</para>
<blockquote>
	    <informalexample>
	      <programlisting format="linespecific">
joe@domain.com (Joe Brown), "Alex Smith" &lt;alex@domain.com&gt;, tom@domain.com
</programlisting>
	    </informalexample>
	  </blockquote>
<para>
The result of the <function moreinfo="none">getaddr</function> function is the
following string:</para>
<blockquote>
	    <informalexample>
	      <programlisting format="linespecific">
joe@domain.com<token>&lt;NL&gt;</token>alex@domain.com<token>&lt;NL&gt;</token>tom@domain.com<token>&lt;NL&gt;</token>
</programlisting>
	    </informalexample>
	  </blockquote>

	<note>
	  <para>
Because <function moreinfo="none">getaddr</function>() interprets
<ulink url="http://www.rfc-editor.org/rfc/rfc822.txt">RFC 2822</ulink>
loosely, it is not
necessary to
strip off the "<literal moreinfo="none">To:</literal>" or the "<literal moreinfo="none">Cc:</literal>"
header from the string, before feeding it to
<function moreinfo="none">getaddr()</function>. For example, the following snippet of code
takes all
addresses in the message, and concatenates them into a single string,
separated by spaces:</para>
	  <blockquote>
	      <informalexample>
		<programlisting format="linespecific">
ADDRLIST=""
foreach /^(To|Cc): .*/
{
    foreach (getaddr $MATCH) =~ /.+/
    {
       ADDRLIST="$ADDRLIST $MATCH"
    }
}
</programlisting>
	      </informalexample>
	    </blockquote>
	</note>

	<note>
	  <para>
In certain rare situations,
<ulink url="http://www.rfc-editor.org/rfc/rfc822.txt">RFC 2822</ulink> allows
spaces to be included in E-mail addresses, so this example is just
educational.</para>
	</note>
      </refsect3>

      <refsect3>
	<title>hasaddr(string) - Search for an address.</title>
	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
if ( hasaddr(<replaceable>string</replaceable>) )
{
   ...
}
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
"<replaceable>string</replaceable>" is of the form
<literal moreinfo="none">user@domain</literal>. The hasaddr
function returns 1 if this address is included in any <literal moreinfo="none">To:</literal>,
<literal moreinfo="none">Cc:</literal>,<literal moreinfo="none"> Resent-To:</literal>, or <literal moreinfo="none">Resent-Cc:</literal>, header
in the message, otherwise this function returns 0.</para>

	<para>
This is more than just a simple text search. Each header is parsed
according to <literal moreinfo="none">RFC822</literal>. Addresses found in the header are
extracted, ignoring all comments and names. The remaining addresses are
checked, and if "<replaceable>string</replaceable>" is one of them,
<function moreinfo="none">hasaddr</function> returns 1,
otherwise it returns 0.</para>

	<para>The comparison is case-insensitive. This actually violates
<literal moreinfo="none">RFC822</literal> (and several others) a little bit, because the user part
of the address may be (but is not required to be) case sensitive.</para>
      </refsect3>

      <refsect3>
	<title>length (string) - length of a string</title>
	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
if (length(<replaceable>string</replaceable>) &gt; 80)
{
   ...
}
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The <function moreinfo="none">length</function> function returns the number of characters in
<replaceable>string</replaceable>.</para>
      </refsect3>

      <refsect3>
	<title>lookup (expr, 'filename', 'options') - read file for patterns</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
if (lookup(<replaceable>expr</replaceable>, <filename moreinfo="none">file</filename>, "<replaceable>option</replaceable>"))
{
   ...
}
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
<replaceable>expr</replaceable> is any expression.
<filename moreinfo="none">filename</filename> is a name of a file containing
a list of patterns. Note that <filename moreinfo="none">filename</filename> is relative to the
current directory, which is the home directory of the user when
<command moreinfo="none">maildrop</command> runs in delivery mode, or embedded mode. <command moreinfo="none">maildrop</command> then
reads the file.
Blank lines will be ignored, as well as any lines that begin
with the # character (comments).</para>

	<para>Leading whitespace (but not trailing whitespace, take care) is removed,
and the remaining contents of each line are interpreted as a pattern which is
matched against <replaceable>expr</replaceable>.
As soon as the match is found, <function moreinfo="none">lookup</function>
returns "1". If no match is found after reading the entire file,
<function moreinfo="none">lookup</function> returns "0". For example:</para>

	<blockquote>
	    <informalexample>
	      <programlisting format="linespecific">
if ( /^To:\s*(.*)/ &amp;&amp; lookup( $MATCH1, "badto.dat" ))
{
   exit
}
</programlisting>
	    </informalexample>
	  </blockquote>

	<para>
The file badto.dat contains the following two lines:</para>

	<blockquote>
	    <informalexample>
	      <programlisting format="linespecific">
friend@public
^[^@]*$
</programlisting>
	    </informalexample>
	  </blockquote>

	<para>
If a message has a <literal moreinfo="none">To:</literal>
header that contains the text "<literal moreinfo="none">friend@public</literal>", or does
not contain at least one <token>@</token> character, then the message will
be silently
dropped on the floor ( <command moreinfo="none">maildrop</command> will terminate without
delivering the
message anywhere).</para>

	<para>
<replaceable>options</replaceable> are the pattern matching options
to use. The only supported
option is "D" (the rest are meaningless, in this case).</para>

	<note>
	  <para>
Be careful with discarding messages like that. Pattern matching can
be tricky, and a slight miscalculation can cause mail to be unintentionally
discarded. It is much desirable to first deliver message to a separate folder
or mailbox, and once the filter is verified to work correctly, change it so
the messages are discarded completely.</para>
	</note>
      </refsect3>

      <refsect3>
	<title>substr(string,start [,count]) - return substring</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
foo=substr($foo, 1, 10)
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The <function moreinfo="none">substr</function> function
extracts characters from <replaceable>string</replaceable>
beginning with character #<replaceable>start</replaceable>.
If <replaceable>count</replaceable> is
specified, at most <replaceable>count</replaceable> characters
starting at position <replaceable>start</replaceable> are kept, any excess is
trimmed.</para>
      </refsect3>

      <refsect3>
	<title>time - return current time</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
foo=time
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
The <function moreinfo="none">time</function> function returns the current time, in
seconds, since
January 1, 1970. This function is useful when using GDBM files. See <ulink url="maildropex.html"><citerefentry><refentrytitle>maildropex</refentrytitle><manvolnum>7</manvolnum></citerefentry></ulink>
for an example of using the <function moreinfo="none">time</function> function.</para>
      </refsect3>

      <refsect3>
	<title>tolower(string) - Convert string to lowercase.</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
foo=tolower(<replaceable>string</replaceable>)
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
This function returns the <replaceable>string</replaceable>
with all uppercase characters
replaced by lowercase characters.</para>
      </refsect3>

      <refsect3>
	<title>toupper(string) - Convert string to uppercase.</title>

	<blockquote>
	  <informalexample>
	    <programlisting format="linespecific">
foo=toupper(<replaceable>string</replaceable>)
</programlisting>
	  </informalexample>
	</blockquote>

	<para>
This function returns the <replaceable>string</replaceable>
with all lowercase characters
replaced by uppercase characters.</para>
      </refsect3>
    </refsect2>

    <refsect2>
      <title>Statements</title>

      <para>
The <systemitem class="resource" moreinfo="none">filter file</systemitem> is read by
<command moreinfo="none">maildrop</command>
(<filename moreinfo="none">$HOME/.mailfilter</filename> or another file), and it
contains filtering
statements, one per line. The filtering language used by
<command moreinfo="none">maildrop</command> has
a loosely - defined grammatical structure.</para>

      <para>Statements are listed one per line. Multiple statements may be listed on
the same line by separating them with semicolons. To continue a long
statement on the next line, terminate the line with a backslash
character.</para>
    </refsect2>
  </refsect1>

  <refsect1>
    <title>BUGS</title>

    <para>
If <function moreinfo="none">getaddr</function>() or <function moreinfo="none">hasaddr</function>()
functions are used on broken headers, the results
are unpredictable.</para>

    <para><function moreinfo="none">hasaddr</function>() is completely case insensitive. This
actually violates a few
RFCs, because the userid portion of the address could be case-sensitive, but
it's not in too many cases, so there.</para>
  </refsect1>

  <refsect1>
    <title>SEE ALSO</title>

    <para>
<ulink url="lockmail.html"><citerefentry><refentrytitle>lockmail</refentrytitle><manvolnum>1</manvolnum></citerefentry></ulink>,
<ulink url="maildrop.html"><citerefentry><refentrytitle>maildrop</refentrytitle><manvolnum>1</manvolnum></citerefentry></ulink>,
<ulink url="maildropgdbm.html"><citerefentry><refentrytitle>maildropgdbm</refentrytitle><manvolnum>5</manvolnum></citerefentry></ulink>,
<ulink url="maildirquota.html"><citerefentry><refentrytitle>maildirquota</refentrytitle><manvolnum>8</manvolnum></citerefentry></ulink>,
<ulink url="reformail.html"><citerefentry><refentrytitle>reformail</refentrytitle><manvolnum>1</manvolnum></citerefentry></ulink>,
<citerefentry><refentrytitle>egrep</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
<citerefentry><refentrytitle>sendmail</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
</para>
  </refsect1>
</refentry>
